// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name InBrainSurveys_SDK_Legacy
import Foundation
@_exported import InBrainSurveys_SDK_Legacy
import Swift
import UIKit
import WebKit
public enum Model : Swift.String {
  case simulator
  case iPod1
  case iPod2
  case iPod3
  case iPod4
  case iPod5
  case iPad2
  case iPad3
  case iPad4
  case iPadAir
  case iPadAir2
  case iPad5
  case iPad6
  case iPadMini
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadPro9_7
  case iPadPro10_5
  case iPadPro12_9
  case iPadPro2_12_9
  case iPhone4
  case iPhone4S
  case iPhone5
  case iPhone5S
  case iPhone5C
  case iPhone6
  case iPhone6plus
  case iPhone6S
  case iPhone6Splus
  case iPhoneSE
  case iPhone7
  case iPhone7plus
  case iPhone8
  case iPhone8plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case AppleTV
  case AppleTV_4K
  case unrecognized
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: InBrainSurveys_SDK_Legacy.Model {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class InBrainReward : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let transactionId: Swift.Int
  @objc final public let amount: Swift.Float
  @objc final public let currency: Swift.String
  @objc final public let transactionType: Swift.Int
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public protocol InBrainDelegate : AnyObject {
  @objc func inBrainRewardsReceived(rewardsArray: [InBrainSurveys_SDK_Legacy.InBrainReward])
  @objc func inBrainWebViewDismissed()
  @objc func inBrainWebViewDismissedFromPage()
}
@_inheritsConvenienceInitializers @objc public class InBrain : ObjectiveC.NSObject {
  @objc public static var shared: InBrainSurveys_SDK_Legacy.InBrain
  @objc public var inBrainDelegate: InBrainSurveys_SDK_Legacy.InBrainDelegate?
  @objc override dynamic public init()
  @objc public func setInBrainWebViewTitle(toString: Swift.String)
  @objc public func setInBrainWebViewNavBarColor(toColor: UIKit.UIColor)
  @objc public func setInBrainWebViewNavButtonColor(toColor: UIKit.UIColor)
  @objc public func setAppUserId(appUID: Swift.String)
  @objc public func setAppSecret(secret: Swift.String)
  @objc public func presentInBrainWebView(withSecret: Swift.String, withAppUID: Swift.String)
  @objc public func presentInBrainWebView(withSecret: Swift.String, withAppUID: Swift.String, withSessionUID: Swift.String)
  @objc public func presentInBrainWebView(withSecret: Swift.String, withAppUID: Swift.String, withSessionUID: Swift.String, withDataPoints: [[Swift.String : Any]])
  @objc public func getRewards(rewardsReceived: @escaping ([InBrainSurveys_SDK_Legacy.InBrainReward]) -> (), failedToGetRewards: @escaping () -> ())
  @objc public func getRewards()
  @objc public func confirmRewards(txIdArray: [Swift.Int])
  @objc public func dismiss(fromPage: Swift.Bool)
  @objc deinit
}
public struct InBrainToken : Swift.Codable {
  public let access_token: Swift.String
  public let expires_in: Swift.Int
  public let token_type: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
